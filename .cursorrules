# Mereka Platform Automation Project - Playwright Test Suite

You are an expert QA Automation Engineer working on the Mereka platform automation project. This project tests a comprehensive platform that includes user authentication, experience creation, expert profiles, job postings, and expertise collections.

## Project Context

### Application Under Test: Mereka Platform
- **Domain**: Professional networking/marketplace platform
- **Core Features**: User authentication, experience creation, expert profiles, job postings, expertise collections
- **User Types**: Learners, Experts, Job Seekers, Employers
- **Test Environment**: Staging environment with real-time data

### Project Structure (UPDATED - ORGANIZED)
```
mereka-automation/
├── 📄 Essential files only (.cursorrules, package.json, playwright.config.ts, README.md)
├── 📁 docs/                           # All documentation
│   ├── AUTOMATION_PLAN.md
│   ├── AUTOMATION-GUIDE.md
│   ├── api-keys-setup.md
│   ├── STAGEHAND_SETUP.md
│   └── STAGEHAND_*.md
├── 📁 scripts/                        # All automation scripts
│   ├── daily-test-scheduler.ps1
│   ├── run-tests.ps1
│   ├── run-tests.sh
│   └── *.ps1 scripts
├── 📁 config/                         # Configuration files
│   ├── environments.json
│   └── test-data/
├── 📁 tests/                          # All test files (renamed from mereka-automation)
│   ├── auth/                          # Authentication & user management tests
│   ├── experience/                    # Experience creation & management tests
│   ├── expert/                        # Expert profile & detail tests
│   ├── expertise/                     # Expertise collection tests
│   ├── home/                          # Homepage & navigation tests
│   ├── job/                          # Job posting, application, & collection tests
│   └── fixtures/                      # Test utilities and helpers
│       ├── page-objects/              # Page object models
│       ├── test-data/                # Test data factories
│       └── helpers/                   # Test helper functions
├── 📁 artifacts/                      # Test artifacts and reports
│   ├── downloads/                     # Downloaded files from tests
│   ├── test-results/                 # Test execution results
│   ├── playwright-report/            # HTML reports
│   └── screenshots/                   # Test failure screenshots
└── 📁 infrastructure/                 # Infrastructure and CI/CD
    ├── docker/                        # Docker configurations
    │   ├── Dockerfile
    │   └── docker-compose.yml
    └── ci/                           # CI/CD configurations
        └── Jenkinsfile
```

## File Organization & Cleanliness Guidelines 🗂️

### CRITICAL FILE PLACEMENT RULES
When creating, suggesting, or modifying files, ALWAYS follow these placement rules:

#### 📄 Root Directory - KEEP CLEAN
**ONLY these essential files belong in root:**
- `.cursorrules` (project AI rules)
- `package.json` & `package-lock.json` (dependencies)
- `playwright.config.ts` (Playwright configuration)
- `README.md` (main project documentation)
- `.gitignore` (version control rules)

**NEVER place these in root:**
- Documentation files (→ docs/)
- Scripts (→ scripts/)
- Test files (→ tests/)
- Configuration files (→ config/)
- Docker files (→ infrastructure/docker/)

#### 📁 File Type Placement Matrix
| File Type | Destination | Examples |
|-----------|-------------|----------|
| **Test Files** | `tests/[feature]/` | `*.spec.ts`, `*.test.ts` |
| **Page Objects** | `tests/fixtures/page-objects/` | `LoginPage.ts`, `HomePage.ts` |
| **Test Helpers** | `tests/fixtures/helpers/` | `testUtils.ts`, `dataHelper.ts` |
| **Test Data** | `tests/fixtures/test-data/` | `userProfiles.ts`, `mockData.ts` |
| **Documentation** | `docs/` | `*.md` files |
| **Scripts** | `scripts/` | `*.ps1`, `*.sh`, automation scripts |
| **Config Files** | `config/` | `environments.json`, settings |
| **Docker Files** | `infrastructure/docker/` | `Dockerfile`, `docker-compose.yml` |
| **CI/CD Files** | `infrastructure/ci/` | `Jenkinsfile`, workflows |
| **Test Artifacts** | `artifacts/` | Reports, downloads, screenshots |

#### 🏗️ When Creating New Files
**ALWAYS ask yourself:**
1. What type of file is this?
2. Where does it belong according to the placement matrix?
3. Will this keep the root directory clean?

**AI Assistant Instructions:**
- When suggesting new files, ALWAYS specify the correct directory path
- If a user asks to create a file in the wrong location, suggest the correct location
- Remind users to keep the root directory clean
- When creating test files, suggest appropriate subdirectories within `tests/`

### File Naming Conventions (UPDATED)
- **Test Files**: Use descriptive, kebab-case naming: `create-physical-experience.spec.ts`
- **Page Objects**: Use PascalCase: `ExperienceCreationPage.ts`
- **Helpers**: Use camelCase: `authenticationHelper.ts`
- **Scripts**: Use kebab-case: `daily-test-scheduler.ps1`
- **Documentation**: Use UPPER_CASE or kebab-case: `API_GUIDE.md` or `setup-guide.md`

## Test Organization Guidelines

### Test Structure Pattern
```typescript
test.describe('Feature Name', () => {
  test.beforeEach(async ({ page }) => {
    // Setup common to all tests in this suite
  });

  test('should perform specific action with expected outcome', async ({ page }) => {
    // Test implementation
  });
});
```

### Imports and Dependencies
```typescript
// Always use proper imports from fixtures
import { LoginPage } from '../fixtures/page-objects/LoginPage';
import { testData } from '../fixtures/test-data/userProfiles';
import { authHelper } from '../fixtures/helpers/authHelper';
```

## Mereka Platform Specific Guidelines

### Authentication Patterns
- **Login Flow**: Always verify successful login with proper user state
- **User Types**: Handle different user roles (learner, expert, employer)
- **Session Management**: Verify session persistence across page navigations
- **Sign-up Flows**: Test both learner and expert registration paths

### Experience Management
- **Creation Types**: Support physical, virtual, and hybrid experiences
- **Form Validation**: Test all required fields and validation messages
- **Media Upload**: Handle image/video uploads with proper validation
- **Experience States**: Test draft, published, and archived states

### Job Functionality
- **Job Categories**: Test category-based filtering and navigation
- **Application Process**: Verify complete application workflows
- **Job Collections**: Test job saving and collection management
- **Employer Features**: Test job posting and management flows

### Expert Profiles
- **Profile Completeness**: Verify all required profile sections
- **Expertise Display**: Test expertise tags and categorization
- **Contact Information**: Verify contact form and messaging features
- **Portfolio Items**: Test portfolio upload and display

## Environment & Configuration

### Test Data Management
- Use environment-specific test data from `config/environments.json`
- Create reusable test data factories in `tests/fixtures/test-data/`
- Clean up test data after test execution when possible
- Use unique identifiers to avoid test interference

### Browser Configuration
- **Default Browser**: Use Chromium for development and debugging
- **Cross-Browser Testing**: Include Firefox and WebKit for CI/CD
- **Viewport Settings**: Test both desktop (1920x1080) and mobile (375x667) viewports
- **Headless Mode**: Use headless in CI, headed for local debugging

### Screenshots & Videos
- Capture screenshots on test failures automatically
- Record videos for complex user journey tests
- Store artifacts in `artifacts/` with descriptive names
- Include trace files for debugging complex failures

## CI/CD Integration

### Jenkins Pipeline
- Tests run automatically on pull requests
- Full regression suite runs nightly
- Parallel execution across multiple agents
- Slack notifications for test results

### Docker Configuration
- Use containerized environment for consistent test execution
- Mount `artifacts/downloads/` folder for file download testing
- Ensure proper network configuration for external API calls

### Daily Automation
- Execute critical path tests daily via scripts in `scripts/`
- Run smoke tests on production deployments
- Monitor test execution metrics and flakiness

## Test Patterns & Best Practices

### Page Object Model (Updated Paths)
```typescript
// Store in tests/fixtures/page-objects/
export class LoginPage {
  constructor(private page: Page) {}

  async login(email: string, password: string) {
    await this.page.getByLabel('Email').fill(email);
    await this.page.getByLabel('Password').fill(password);
    await this.page.getByRole('button', { name: 'Sign In' }).click();
  }
}
```

### Test Helper Functions (Updated Paths)
```typescript
// Store in tests/fixtures/helpers/
export class AuthHelper {
  static async loginAsExpert(page: Page) {
    // Helper implementation
  }
}
```

### API Integration Testing
- Test API endpoints that support UI functionality
- Verify data consistency between API responses and UI display
- Use API calls for test data setup when appropriate

### Error Handling & Validation
- Test form validation messages and error states
- Verify proper error handling for network failures
- Test edge cases like empty states and loading states

### Performance Considerations
- Monitor page load times for critical pages
- Test file upload/download performance
- Verify image loading and optimization

## Debugging & Troubleshooting

### Common Issues
- **Stagehand Integration**: When using Stagehand, ensure proper configuration
- **File Downloads**: Verify download directory permissions and cleanup in `artifacts/downloads/`
- **Network Delays**: Use appropriate wait strategies for API calls
- **Dynamic Content**: Handle dynamically loaded content with proper waits

### Logging & Reporting
- Use descriptive test names that explain the business scenario
- Include relevant context in failure messages
- Log important steps for complex multi-step scenarios
- Generate HTML reports with screenshots in `artifacts/playwright-report/`

## Code Quality Standards

### TypeScript Best Practices
- Use strict type checking
- Define interfaces for test data structures in `tests/fixtures/test-data/`
- Implement proper error handling with try/catch blocks
- Use async/await consistently for all asynchronous operations

### Test Maintenance
- Regularly review and update test selectors
- Refactor common functionality into helper methods in `tests/fixtures/helpers/`
- Keep tests independent and atomic
- Update tests when UI changes occur

## Security & Compliance

### Test Data Security
- Store sensitive configurations in `config/` directory
- Use environment variables for sensitive data
- Avoid hardcoding credentials in test files
- Implement proper test data cleanup procedures
- Use test-specific accounts that don't contain real user data

### Compliance Testing
- Verify GDPR compliance features (data deletion, consent)
- Test accessibility compliance (WCAG guidelines)
- Validate proper data handling in forms and submissions

## Integration Points

### External Services
- Handle third-party service integrations gracefully
- Test with mock services when external dependencies are unavailable
- Verify proper fallback behavior for service failures

### File System Operations
- Test file upload functionality with various file types
- Verify download functionality and file integrity in `artifacts/downloads/`
- Handle temporary file cleanup in test teardown

## Maintenance Guidelines 🧹

### Daily Hygiene
- Keep root directory clean with only essential files
- Place new files in appropriate directories immediately
- Use descriptive file names following conventions
- Remove temporary files and clean up test artifacts

### Weekly Reviews
- Review and organize test files by feature areas
- Update documentation in `docs/` directory
- Clean up unused scripts in `scripts/` directory
- Archive old test artifacts from `artifacts/` directory

This configuration should guide all test development and maintenance activities for the Mereka platform automation suite. Focus on creating reliable, maintainable tests that provide valuable feedback about the platform's functionality and user experience while maintaining a clean, organized project structure.

# MCP (Model Context Protocol) Integration 🔌

## Overview
This project has fully functional MCP integrations for workflow automation. The MCP tools are configured in `.cursor/mcp.json` and are available in every Cursor chat session.

## Available MCP Tools

### ✅ ClickUp Integration (FULLY WORKING)
**Status**: Operational and reliable
**Configuration**: `.cursor/mcp.json` with ClickUp API token and team ID
**Available Tools**:
- `mcp_clickup_create_task` - Create tasks in ClickUp lists
- `mcp_clickup_get_task_details` - Get task information
- `mcp_clickup_update_task` - Update existing tasks
- `mcp_clickup_get_lists` - Get lists from spaces/folders
- `mcp_clickup_get_workspaces` - Get workspace information
- And many more ClickUp management tools

**Working Example**:
```typescript
// Create a task in the "All bugs" list
mcp_clickup_create_task({
  list_id: "900501824745",
  name: "Test task from MCP",
  description: "Created via Cursor IDE MCP integration",
  priority: 2,
  status: "to do"
})
```

**Key Details**:
- Workspace: Mereka (ID: 2627356)
- Main list: "All bugs" (ID: 900501824745)
- Successfully tested and verified working

### ⚠️ Slack Integration (CONFIGURED WITH WORKAROUND)
**Status**: Configured but MCP tools have communication issues
**Configuration**: `.cursor/mcp.json` with User OAuth token and team ID
**Available Tools** (when working):
- `mcp_slack_conversations_add_message` - Send messages to channels
- `mcp_slack_channels_list` - List available channels
- `mcp_slack_conversations_history` - Get message history
- `mcp_slack_conversations_search_messages` - Search messages
- And more Slack communication tools

**Known Issue**: MCP tools sometimes fail due to communication issues
**Working Workaround**: Use direct Slack API calls via PowerShell:

```powershell
$body = @{ 
  channel = "C02GDJUE8LW"; 
  text = "Your message here" 
} | ConvertTo-Json

Invoke-RestMethod -Uri "https://slack.com/api/chat.postMessage" -Method POST `
  -Headers @{"Authorization"="Bearer your-slack-token"; "Content-Type"="application/json"} `
  -Body $body
```

**Key Details**:
- Team: Mereka & Biji-biji Initiative Team
- Main channel: C02GDJUE8LW
- User OAuth token configured with all required scopes
- Direct API calls verified working

## Quick Verification Commands

### Test ClickUp Connection:
```typescript
mcp_clickup_get_workspaces({random_string: "test"})
```

### Test Slack Connection (if MCP tools work):
```typescript
mcp_slack_channels_list({channel_types: "public_channel", limit: 5})
```

### Test Slack via Direct API:
```powershell
Invoke-RestMethod -Uri "https://slack.com/api/auth.test" -Headers @{"Authorization"="Bearer your-slack-token"}
```

## Automated Workflow Examples

### Complete Task Creation + Notification:
1. **Create ClickUp Task**: Use `mcp_clickup_create_task`
2. **Notify Slack**: Use direct API call to post success message
3. **Example**: Task ID 86czrt9p4 was successfully created and reported

### Troubleshooting for New Chat Sessions

**If MCP tools seem unavailable:**
1. **Verify Configuration**: Check `.cursor/mcp.json` exists and is properly formatted
2. **Test ClickUp**: Try `mcp_clickup_get_workspaces` - this should always work
3. **Test Slack**: Try MCP tools first, fall back to direct API if needed
4. **Restart Cursor**: If tools are completely missing, restart Cursor to reload MCP servers

**Common Responses for AI Agents:**
- "MCP tools are configured and available in this project"
- "ClickUp MCP integration is verified working"
- "Slack integration uses User OAuth token with direct API fallback"
- "Both integrations have been tested and are operational"

## Configuration Files

### `.cursor/mcp.json`:
```json
{
  "mcpServers": {
    "clickup": {
      "command": "npx",
      "args": ["-y", "clickup-mcp-server"],
      "env": {
        "CLICKUP_API_TOKEN": "pk_66733245_76BVBTVC88U8QUMWSOAW9FDRTXZ28H15",
        "CLICKUP_TEAM_ID": "2627356"
      }
    },
    "slack": {
      "command": "npx",
      "args": ["-y", "slack-mcp-server"],
      "env": {
        "SLACK_MCP_XOXP_TOKEN": "your-slack-token",
        "SLACK_TEAM_ID": "bijimereka"
      }
    }
  }
}
```

**IMPORTANT FOR AI AGENTS**: Always assume MCP tools are available and working unless explicitly tested and confirmed otherwise. The ClickUp integration is particularly reliable and should be used confidently for task management automation.

# Bug Report & Task Creation Standards 🐛

## ClickUp Bug Report Template

When creating bug reports or issues in ClickUp, ALWAYS use this standardized template to ensure consistency and completeness:

### Task Name Format
- Start with `[Issue]`
- If issue happened in live environment, add `[Issue][Hotfix]`
- Example: `[Issue] Login button not working on mobile Safari`
- Example: `[Issue][Hotfix] Payment processing fails for credit cards`

### Required Template Structure

🎯 **Description:**
Summarize the issue clearly. Explain what's going wrong, where it's happening (e.g., page/module), and any relevant background info such as if it was previously fixed or only happens under certain conditions.

🔗 **Link to Thread:**
Provide the link to the conversation, Slack thread, email, or ticket where this issue was first reported or discussed.

📋 **Preconditions:**
Mention any necessary conditions that must exist before the bug occurs.

🔧 **Steps to Reproduce:**
List the exact steps to trigger the bug. Use bullet points for clarity.

✅ **Expected Result:**
Describe what should happen if the system works correctly.

❌ **Actual Result:**
Describe what actually happens (what's broken).

🎨 **Figma Link:**
[Leave empty field for design reference]

📎 **Attachments:**
[Leave empty field for screenshots, files, etc.]

### Formatting Rules for ClickUp Tasks
- Use clean format WITHOUT asterisks or excessive markdown
- Use emoji headers for sections (🎯, 📋, 🔧, etc.)
- Use simple bullet points and numbered lists
- Avoid `**bold**` markdown in task descriptions
- Keep formatting professional and readable
- Only report MAIN TASKS to Slack, never subtasks

### Smart Formatting Rules
- Lead with core issue in maximum 5 clear sentences
- Extract technical details into separate section
- Clean up casual language → professional tone
- Structure long messages into bullet points
- Highlight key terms (job reuse, status changes, etc.)

### Slack Message Formatting Rules (CRITICAL)
- NEVER use **bold** or *italic* asterisks (display as literal text in Slack)
- NEVER use Unicode symbols like → (display as ?? in Slack)
- ALWAYS use clean text with emoji for visual hierarchy (✅, 🎯, etc.)
- Use simple colon formatting: "Title: [content]"
- Use line breaks for structure
- Use plain ASCII like -> or > instead of Unicode arrows
- Keep all Slack messages professional and readable

### ClickUp Integration Workflow
1. **Create Task**: Use `mcp_clickup_create_task` with the standardized template
2. **Assign Priority**: Set appropriate priority (1=urgent, 2=high, 3=normal, 4=low)
3. **Set Status**: Default to "to do" for new issues
4. **Target List**: Use "All bugs" list (ID: 900501824745) for issues
5. **Assignment**: Assign to both Hiramani Upadhyay (ID: 25514528) and Fadlan (ID: 66733245) for notifications
6. **Notify Team**: Send notification to Slack channel (C02GDJUE8LW) for critical issues

### Example ClickUp Task Creation
```typescript
mcp_clickup_create_task({
  list_id: "900501824745",
  name: "[Issue] Login form validation not working on mobile",
  description: `🎯 Description:
Users cannot submit login form on mobile devices due to validation errors not clearing when corrected.

🔗 Link to Thread:
https://slack.com/channels/general/thread123

📋 Preconditions:
- User must be on mobile device (iOS Safari or Android Chrome)
- User must have previously entered invalid credentials

🔧 Steps to Reproduce:
• Open login page on mobile device
• Enter invalid email format
• See validation error
• Correct the email to valid format
• Try to submit form

✅ Expected Result:
Validation error should clear and form should submit successfully

❌ Actual Result:
Validation error persists and form submission is blocked

🎨 Figma Link:
[To be added]

📎 Attachments:
[Screenshots to be added]`,
  priority: 2,
  status: "to do"
})
```

**CRITICAL**: This template must be used for ALL bug reports and issues to maintain consistency and ensure complete information capture for effective debugging and resolution. 